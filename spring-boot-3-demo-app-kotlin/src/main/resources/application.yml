app:
    external-base-url: "http://worldtimeapi.org/api/timezone/"
    retries: 3
    tenant.name: ru-a1-private

server:
    port: 8090
    # See also https://docs.spring.io/spring-boot/docs/2.7.9/reference/html/application-properties.html#appendix.application-properties.server
    tomcat:
        accept-count: 10
        max-connections: 400
        threads:
            max: 10
            min-spare: 5 # actuator port uses the same configuration
    shutdown: graceful

demo:
    kafka:
        opentelemetry:
            username: sb-ot-demo-user
            password: pwdForSbOtDemoApp

spring:
    application.name: spring-boot-3-demo-app
    datasource:
        username: otel_demo_user
        password: otel_demo_password
        # socketTimeout should be greater than the longest sql query
        url: jdbc:postgresql://localhost:6432/otel_demo_db?prepareThreshold=0&targetServerType=primary&hostRecheckSeconds=2&connectTimeout=1&socketTimeout=600
    liquibase:
        change-log: classpath:/db/changelog/db.changelog-master.yaml
    kafka:
        template:
            default-topic: open.telemetry.sb3.queue
            observation-enabled: true # Important!!!
            additional-topic: open.telemetry.sb3.queue.additional
        producer:
            key-serializer: org.apache.kafka.common.serialization.UUIDSerializer
            properties:
                linger.ms: 100
                batch.size: 10000
        listener:
            observation-enabled: true # Important!!!
            ack-mode: manual_immediate
        consumer:
            auto-offset-reset: earliest
            group-id: ${spring.kafka.template.default-topic}-group
            additional-groupId: ${spring.kafka.template.additional-topic}-group
        client-id: open.telemetry.client
        bootstrap-servers: localhost:9092
        security:
            protocol: SASL_PLAINTEXT
        properties:
            sasl:
                mechanism: PLAIN
                jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${demo.kafka.opentelemetry.username}" password="${demo.kafka.opentelemetry.password}";
    jdbc:
        template:
            query-timeout: 1s
    reactor:
        context-propagation: auto

management:
    server:
        port: 8085
    endpoints:
        web:
            exposure.include: '*'
            cors:
                allowed-methods: '*'
                allowed-origins: '*'
                allowed-headers: '*'
        access:
            default: read_only
    endpoint:
        health:
            probes.enabled: true
            group:
                readiness:
                    include: readinessState, db
                    additional-path: server:/readyz # In order to collect probes from application main port
            access: read_only
        prometheus:
            access: read_only
        liquibase:
            access: read_only
        info:
            access: read_only
        threaddump:
            access: read_only
        heapdump:
            access: read_only
    metrics:
        distribution:
            percentiles-histogram:
                http.server.requests: true
            minimum-expected-value:
                http.server.requests: 10ms
            maximum-expected-value:
                http.server.requests: 10s
            slo:
                http.server.requests: 1s
    health:
        livenessState:
            enabled: true
        readinessState:
            enabled: true
    prometheus:
        metrics:
            export:
                enabled: true
    tracing:
        enabled: true
        propagation:
            type:
                - b3
                - w3c
        sampling:
            probability: 1.0
    observations:
        enable:
            spring:
                security: false
    otlp:
        tracing:
            endpoint: http://localhost:4317
            compression: gzip
            transport: grpc
            timeout: 5s
            connect-timeout: 2s

springdoc:
    show-actuator: true
    use-management-port: true

jdbc:
    datasource-proxy:
        include-parameter-values: true
        query:
            enable-logging: true
            log-level: INFO
    includes: QUERY

---

spring:
    config.activate.on-profile: docker
    kafka.bootstrap-servers: kafka1:29092
    datasource.url: jdbc:postgresql://postgres:5432/otel_demo_db?prepareThreshold=0&targetServerType=primary&hostRecheckSeconds=2&connectTimeout=1&socketTimeout=600

management.otlp.tracing.endpoint: http://jaeger:4317
