server:
    port: 8090
    # See also https://docs.spring.io/spring-boot/docs/2.7.9/reference/html/application-properties.html#appendix.application-properties.server
    tomcat:
        accept-count: 10
        max-connections: 400
        threads:
            max: 10
            min-spare: 5 # actuator port uses the same configuration
    shutdown: graceful

demo:
    kafka:
        opentelemetry:
            username: sb-ot-demo-user
            password: pwdForSbOtDemoApp

spring:
    application.name: spring-boot-2-demo-app
    datasource:
        username: otel_demo_user
        password: otel_demo_password
        # socketTimeout should be greater than the longest sql query
        url: jdbc:postgresql://localhost:6432/otel_demo_db?prepareThreshold=0&targetServerType=primary&hostRecheckSeconds=2&connectTimeout=1&socketTimeout=600
    liquibase:
        change-log: classpath:/db/changelog/db.changelog-master.yaml
    kafka:
        template:
            default-topic: open.telemetry.sb2.queue
        producer:
            key-serializer: org.apache.kafka.common.serialization.UUIDSerializer
        listener:
            ack-mode: manual_immediate
        consumer:
            auto-offset-reset: earliest
            group-id: ${spring.kafka.template.default-topic}-group
        client-id: open.telemetry.client
        bootstrap-servers: localhost:9092
        security:
            protocol: SASL_PLAINTEXT
        properties:
            sasl:
                mechanism: PLAIN
                jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="${demo.kafka.opentelemetry.username}" password="${demo.kafka.opentelemetry.password}";
    sleuth:
        propagation:
            type:
                - W3C
                - B3
        otel:
            exporter.otlp.endpoint: http://localhost:4317
            config.trace-id-ratio-based: 1.0
            log:
                slf4j.enabled: true
                exporter.enabled: true
        trace-id128: true
        supports-join: false
        web:
            additional-skip-pattern: .*/readyz
        jdbc:
            datasource-proxy:
                query:
                    enable-logging: true
                    log-level: INFO
            includes: QUERY
    jdbc:
        template:
            query-timeout: 1s

management:
    server:
        port: 8091
    endpoints:
        enabled-by-default: false
        web:
            exposure.include: '*'
            cors:
                allowed-methods: '*'
                allowed-origins: '*'
                allowed-headers: '*'
    endpoint:
        health:
            enabled: true
            probes.enabled: true
            group:
                readiness:
                    include: readinessState, db
                    additional-path: server:/readyz # In order to collect probes from application main port
        prometheus:
            enabled: true
        liquibase:
            enabled: true
        info:
            enabled: true
        threaddump:
            enabled: true
        heapdump:
            enabled: true
    metrics:
        distribution:
            percentiles-histogram:
                http.server.requests: true
            minimum-expected-value:
                http.server.requests: 10ms
            maximum-expected-value:
                http.server.requests: 10s
            slo:
                http.server.requests: 1s
        export:
            prometheus.enabled: true
    health:
        livenessstate:
            enabled: true
        readinessstate:
            enabled: true

springdoc:
    show-actuator: true
    use-management-port: true

---

spring:
    sleuth.otel.exporter.otlp.endpoint: http://jaeger:4317
    kafka.bootstrap-servers: kafka1:29092
    datasource.url: jdbc:postgresql://postgres:5432/otel_demo_db?prepareThreshold=0&targetServerType=primary&hostRecheckSeconds=2&connectTimeout=1&socketTimeout=600
    config.activate.on-profile: docker
